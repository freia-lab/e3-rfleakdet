Terminator = LF;
ExtraInput=Ignore;

getId {
        out "R nid";
        in "R nid %d";
}

setId {
        out "W nid %d";
        in "W nid %d";
    	@init { getId; }
}

isMaster {
        out "R mst";
        in "R mst %d";
}

setMaster {
        out "W mst %d";
	in "W mst %d";
   @init { isMaster; }
}

getConfSelf {
        out "R crs";
	in "R crs %d";

}
getNofNodes {
        out "R ncn";
        in "R ncn %d";
}

getAan {
        out "R aan";
        in "R aan %d";
}

setAllowAllNodes {
        out "W aan %d";
        in "W aan %d";
   @init { getAan; }
}

getConnNodes { separator = " ";
        out "R rci";
        in "R rci %d";
}

getAllowedNodes { separator = " ";
        out "R ani";
        in "R ani%d";
}


getRFdata { separator = " ";
        out "R rsd \$1";
        in "R rsd \$1: %d";
}

getStatus {
    out "R cnf";
    in "R cnf";
}

## Write Only commands

applyConfigBuf {
    out "W acs";
    in "W acs";
}

reboot {
    out "W rbt";
}

reset {
    out "W rst";
    in "W rst";
}

resetNetwork {
    out "W rsn";
    in "W rsn";
}

savConf {
    out "W scf";
    in "W scf";
}

rmAllowedNode {
    out "W rai %d";
    in "W rai %d";
}

addAllowedNode {
    out "W aai %d";
    in "W aai %d";
}

# Connect a stringout record to this to get
# a generic command interface.
# After processing finishes, the record contains the reply.
debug {
ExtraInput = Ignore;
out "%s"; in "%#s"
}

debugin {
in "%#s"
}

